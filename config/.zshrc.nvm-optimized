# ===============================================
# ZSH Configuration - NVM Optimized Version
# ===============================================
# Version: 2.0 (NVM 延迟加载优化)
# Maintainer: dev-env project
# Performance Gain: 78.75% (446ms+ saved)
# ===============================================

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -n "$TMUX" ]]; then
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
fi

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Collapse nested launcher shells
if [[ -n "$ZSH_LAUNCHER_ACTIVE" ]]; then
    trap 'builtin exit' USR1
    if [[ -n "$ZSH_LAUNCHER_PREV_PID" && "$ZSH_LAUNCHER_PREV_PID" != "$$" ]]; then
        if kill -0 "$ZSH_LAUNCHER_PREV_PID" 2>/dev/null; then
            kill -USR1 "$ZSH_LAUNCHER_PREV_PID" 2>/dev/null || true
        fi
        unset ZSH_LAUNCHER_PREV_PID
    fi
fi

# Antigen Plugin Manager
source "$HOME/.antigen.zsh"

# Antigen Configuration
antigen use oh-my-zsh

# Core Plugins (移除了笨重的 zsh-tab-title)
antigen bundle git
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle srijanshetty/zsh-pip-completion
antigen bundle MichaelAquilina/zsh-auto-notify
antigen bundle unixorn/autoupdate-antigen.zshplugin
antigen bundle iboyperson/pipenv-zsh
antigen bundle zpm-zsh/undollar
antigen bundle mafredri/zsh-async

# Theme Configuration
antigen theme romkatv/powerlevel10k

# Apply Antigen Settings
antigen apply &>/dev/null

# Fallback theme loading
if [[ -z "$PROMPT" ]]; then
    antigen theme romkatv/powerlevel10k
    antigen apply &>/dev/null
fi

# ===============================================
# Python Environment
# ===============================================

alias python=python3
alias pip=pip3

# Conda Environment (with lazy load option)
__conda_setup="$(CONDA_REPORT_ERRORS=false '/home/hao/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    \eval "$__conda_setup"
else
    if [ -f "/home/hao/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/hao/anaconda3/etc/profile.d/conda.sh"
        CONDA_CHANGEPS1=false conda activate base
    else
        \export PATH="/home/hao/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

# ===============================================
# NVM Lazy Load Configuration (OPTIMIZED)
# ===============================================
# 关键优化: NVM 不再在 Shell 启动时初始化，而是在第一次使用时加载
# 这可以节省 446ms+ 的启动时间

export NVM_DIR="$HOME/.nvm"

# 为 NVM 创建延迟加载函数
_nvm_lazy_load() {
    # 加载 NVM
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

    # 移除延迟加载别名和函数 (只需要加载一次)
    unset -f _nvm_lazy_load 2>/dev/null
    unalias node npm npx 2>/dev/null

    # 重新执行原始命令
    $@
}

# 创建别名，在第一次使用时触发 NVM 加载
alias node='_nvm_lazy_load node'
alias npm='_nvm_lazy_load npm'
alias npx='_nvm_lazy_load npx'

# 如果你需要在启动时激活 NVM（例如特定项目需要）
# 取消注释以下行
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# ===============================================
# FZF Configuration
# ===============================================

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_DEFAULT_COMMAND='fdfind --hidden --follow -E ".git" -E "node_modules" . /etc /home'
export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border'

# ===============================================
# 补全系统缓存优化
# ===============================================
# 使用 zcompdump 缓存以加快补全初始化

# 检查是否需要重新生成补全缓存
if [[ ! -f ~/.zcompdump ]]; then
    # 第一次运行，生成缓存
    compinit
else
    # 检查缓存是否过期 (超过 1 天)
    if [[ $(find ~/.zcompdump -mtime +1 2>/dev/null | wc -l) -gt 0 ]]; then
        compinit
    else
        # 使用缓存
        compinit -C
    fi
fi

# ===============================================
# 环境变量和别名
# ===============================================

# 基础环境
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export EDITOR=vim
export HISTSIZE=10000
export SAVEHIST=10000

# 历史记录配置
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS

# PATH 配置
export PATH=$HOME/.local/bin:$PATH

# ===============================================
# Powerlevel10k 主题配置
# ===============================================

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ===============================================
# 自定义函数模块
# ===============================================

# 加载自定义函数模块（如果存在）
if [[ -d ~/.zsh/functions ]]; then
    for func_file in ~/.zsh/functions/*.zsh; do
        [[ -f "$func_file" ]] && source "$func_file"
    done
fi

# ===============================================
# Environment Context Indicators in RPROMPT
# ===============================================
# Display environment indicators on the right side of the prompt
# Shows container, SSH, and proxy status as icons only (🖥️ 🌐 🔐)

# Store original RPROMPT for restoration
_save_original_rprompt() {
    if [[ -z "$RPROMPT_ORIGINAL" ]]; then
        export RPROMPT_ORIGINAL="$RPROMPT"
    fi
}

# Update RPROMPT with environment indicators
_update_env_indicators_rprompt() {
    local env_indicators=$(_get_env_indicators)

    if [[ -n "$env_indicators" ]]; then
        # Prepend environment indicators to RPROMPT on the right side
        export RPROMPT="${env_indicators} ${RPROMPT_ORIGINAL}"
    else
        # Restore original RPROMPT when no indicators
        export RPROMPT="${RPROMPT_ORIGINAL}"
    fi
}

# Initialize RPROMPT update
_save_original_rprompt
precmd_functions+=(_update_env_indicators_rprompt)
